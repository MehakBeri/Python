'''
# revisit later
Question and Sol:  https://app.codility.com/demo/results/trainingDHE4U4-FUZ/  , https://www.geeksforgeeks.org/find-the-smallest-positive-number-missing-from-an-unsorted-array/ 
'''

import unittest
class Solution: #still has issues
    def segregate(self, A):
        '''returns idx after which values are greater than 0'''
        ptr = 0
        for idx, i in enumerate(A):
            if i<1:
                A[idx], A[ptr] = A[ptr], A[idx]
                ptr += 1
        return ptr

    def missing_int(self, A):
        # time O(n); space= const
        n = len(A)
        valid_values_ptr = self.segregate(A)
        for idx in range(valid_values_ptr, n):
            tmp = abs(A[idx]) -1
            if tmp<n-valid_values_ptr and tmp>0:
                A[tmp] = -abs(A[tmp])
        for idx in range(n-valid_values_ptr):
            if A[valid_values_ptr + idx] > 0:
                return idx + 1
        return n-valid_values_ptr+1

class Test(unittest.TestCase):
    def setUp(self):
        self.sol = Solution()

    def test_1(self):
        self.assertEqual(self.sol.missing_int([1, 3, 6, 4, 1, 2]),5)

    def test_2(self):
        self.assertEqual(self.sol.missing_int([1, 3, 2]),4)

    def test_3(self):
        self.assertEqual(self.sol.missing_int([-1, -3]), 1)

    def test_4(self):
        self.assertEqual(self.sol.missing_int([1, 2, 3]),4)

    def test_5(self):
        self.assertEqual(self.sol.missing_int([0,0]),1)

    def test_6(self):
        self.assertEqual(self.sol.missing_int([-4, -2]),1)

    def test_7(self):
        self.assertEqual(self.sol.missing_int([-9]), 1)

    def test_8(self):
        self.assertEqual(self.sol.missing_int([3]),1)

    def test_9(self):
        self.assertEqual(self.sol.missing_int([1,2,-4,3]),4)

    def test_10(self):
        a = [6, 17, 69, 80, 77, -27, 90, -15, -39, -81, 2, -69, -45, 22, 56, 51, 13, -83, -88, -49, 10, 25, 68, 60, 87, 18, 27, -42, -37, -59, 7, 22, 15, -22, -15, -51, 63, 16, 50, 63, -44, -77, -44, 82, 59, -19, 56, -32, 73, -82, 48, 97, -16, -8, -74, -45, -53, -41, -87, -40, -80, 5, -19, -55, 89, -38, 6, 79, 52, 94, 22, 75, -87, 47, -33, -36, 54, 49, -32, -27, -44, 87, 23, -48, 6, -89, -46, 0, 95, 72, 10, 53, -50, 39, 100, -70, 87, 98, -27, 63, 98, -71, -7, 19, 59, -47, 51, 41, 72, 47, 73, 21, 9, -8, -19, -8, -1, -22, -71, -21, 89, -39, 97, 67, -9, -57, 76, 91, -38, 34, 51, 24, -76, -53, 45, 27, 34, -44, 76, 56, -3, 71, -40, 7, 4, 94, 88, -32, 56, -41, 77, 79, 37, -93, -39, -66, 1, -93, -88, -81, 73, 20, 74, 89, 14, 70, -13, 22, -67, -11, -81, -8, 93, 99, 50, -92, 98, 6, 35, -19, 55, -37, -78, -8, -63, -55, -61, 41, 36, -56, 38, -95, 89, -53, 2, -26, 71, -12, -67, 72, 17, -47, 43, 80, 49, 59, -30, -53, -89, 80, -54, -26, 61, -78, 86, 12, -66, 62, 34, -88, -3, 42, -46, -33, 72, -72, -50, -76, -2, -11, -45, -82, -76, 51, 16, 61, -78, 91, 38, 15, 66, -86, 22, -40, -94, 51, -95, 47, -45, 70, -89, -4, 96, 7, 24, 3, 18, -20, -47, -41, 68, -35, 40, 88, 86, 70, 80, 30, 8, -79, -86, -40, -3, -2, -98, 17, -29, -21, -83, 56, 61, 50, -78, -96, 92, 24, 90, -18, 60, -77, -84, 37, 34, -29, 7, 26, -54, -100, -7, -46, 93, -63, 6, -56, -15, -60, -55, 49, 49, 33, 100, 92, 5, 76, 36, 56, -51, 87, 39, -76, -100, -27, 31, -34, -25, 51, -50, -93, -15, -30, 30, -80, 71, 97, 50, 3, -59, -91, 35, 89, -38, 65, 93, 64, 4, 42, -35, -1, -58, 59, -50, 68, 46, -56, -82, 36, -31, 23, 75, -43, -71, 16, 40, 11, -96, -8, 26, 84, -45, -33, -27, 44, -42, 56, 10, 24, -80, 74, -6, -10, -22, 86, 87, 57, 95, -28, 97, 50, 55, 77, -64, -94, -72, 89, 1, -100, 32, 61, -54, 0, -50, 3, -41, -34, 26, 47, 100, -48, 96, -29, -15, -15, -38, -1, 65, 82, 94, -21, -37, -65, 18, -32, -86, -41, 59, 39, 23, -38, 69, -7, -37, -47, -22, -18, -34, -10, -9, -29, -60, -46, -13, 99, -98, 94, -1, -98, -13, -45, -100, 64, 39, 96, -28, 92, 88, 22, 12, -54, 42, 3, 41, -57, -99, -66, -62, 23, -20]
        self.assertEqual(self.sol.missing_int(a), 28)

    def test_11(self):
        a = [57871, 171494, 686653, 1, 2, 3, 797290, 764373, -270609, 897681, -151851, 4, -387633, -810935, 23356, -690354, -451541, 221171, 552755, 505323, -827194, -877534, -489567, 103921, 677688, 600931, 867500, 177585, 273379, -416086, -372296, -587994, 70557, 214511, 146385, -216037, -152203, -503109, 630377, 162087, 497393, 623265, -438323, -765941, -434214, 814421, 583305, -189067, 553153, -316064, 730805, -819470, 481851, 960769, -159855, -76187, -738241, -449492, -532293, -407650, -863025, -401147, -791354, 49191, -187195, -545081, 886437, -381114, 62978, 789367, 516669, 931251, 218818, 741604, -869800, 468200, -327791, -358323, 539256, 483488, -316199, -273163, -442763, 868002, 229444, -480135, 64588, -884489, -460853, 2890, 945348, 716327, 95077, 526224, -496237, 388427, 992369, -691999, 865261, 970751, -263999, 627942, 977251, -704422, -70389, 187624, 587697, -468001, 503633, 407963, 715692, 469021, 721896, 208117, 86455, -76553, -186428, -74783, -13268, -216066, -709851, -204615, 890143, -387848, 965477, 664892, -93062, -564180, 758017, 910099, -378604, 337705, 507155, 241894, -759296, -528419, 443162, 269808, 343225, -438480, 759462, 553107, -30062, 709654, -395971, 66272, 40757, 936514, 874771, -317984, 560892, -405057, 766260, 783397, 363359, -929436, -389523, -657663, 8832, -926562, -874509, -801118, 729655, 203406, 733016, 886528, 137116, 693268, -130475, 217946, -665712, -109003, -807437, -76188, 925311, 983913, 499936, -910767, 978591, 62231, 350524, -185782, 550143, -371607, -780350, -81734, -625370, -551402, -604714, 404086, 362419, -557723, 373621, -943764, 889053, -531740, 23212, -259694, 708856, -120546, -664658, 720977, 164411, -467760, 426355, 791540, 487730, 586066, -293996, -529583, -890301, 792867, -534616, -262818, 606492, -775673, 857166, 122601, -659367, 621328, 339294, -873002, -25363, 420393, -454981, -329306, 713004, -717932, -496432, -752668, -24177, -109949, -451336, -812829, -751645, 510875, 161762, 604614, -775186, 904664, 378407, 153826, 654938, -853308, 217181, -393371, -937719, 512345, -940885]
        self.assertEqual(self.sol.missing_int(a), 5)

    def test_12(self):
        a=[4,5,1,6,2]
        self.assertEqual(self.sol.missing_int(a), 3)

    def test_13(self):
        a=[4,5,6,2]
        # self.assertEqual(self.sol.missing_int(a), 1)
        self.assertEqual(self.sol.missing_int([2], 1))
        # self.assertEqual(self.sol.missing_int([1], 2))

if __name__=="__main__":
    unittest.main()